{"version":3,"sources":["redux/dimensions/dimensions.selectors.js","utils/weather/weather-background.js","components/weather/info/info.styles.js","components/weather/info/info.component.jsx","redux/favorites/favorites.actions.js","redux/weather-unit/weather-unit.selectors.js","utils/weather/weather-icon.js","utils/weather/temperature-convert.js","components/weather/weather-icon/weather-icon.components.js","components/weather/info-detail-summary/info-detail-summary.styles.js","components/weather/info-detail-summary/info-detail-summary.component.jsx","redux/weather-unit/weather-unit.actions.js","components/weather/info-detail-other/info-detail-other.styles.js","components/weather/info-detail-other/info-detail-other.component.jsx","utils/weather/wind-direction.js","utils/weather/speed-convert.js","components/weather/info-detail/info-detail.styles.js","components/weather/info-detail/info-detail.component.jsx","config/carousel-settings.js","components/weather/time-frame/time-frame.styles.js","components/weather/time-frame/time-frame.component.jsx","components/weather/day/day.styles.js","components/weather/day/day.component.jsx","containers/forecast/forecast.styles.js","containers/forecast/forecast.container.jsx","containers/weather/weather.styles.js","containers/weather/weather.container.jsx"],"names":["dimensionsSelector","state","dimensions","selectDimensionsWidth","createSelector","width","height","getHour","type","time","timezone","moment","tz","format","InfoContainer","styled","div","TimeContainer","BookmarkContainer","City","p","Time","Paragraph","Span","span","mapStateToProps","createStructuredSelector","weatherCurrent","selectWeatherFetchCurrent","address","selectAddress","latlong","selectLatlong","favorites","favoritesSelector","connect","toggleFavorite","value","TOGGLE_FAVORITE","payload","name","fullName","useState","date","setDate","setTime","formattedDateTimeRef","useRef","datetimeSetter","dateObj","current","useEffect","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","onClick","matched","filter","favorite","length","isBookmarked","selectUnit","weatherUnit","unit","weatherIcon","data","icon","hour","fToC","temp","Math","round","WeatherIcon","up","right","down","left","sunrise","sunset","InfoDetailSummaryContainer","SummaryIcon","SummaryTemp","WeatherIconContainer","Text","Image","img","Temp","Sup","Unit","CurrentUnit","VerticalBar","ToggleUnit","toggleUnit","TOGGLE_UNIT","summary","unselectedUnit","startsWith","alt","src","InfoDetailOtherContainer","Wrapper","Humidity","Wind","Feel","Name","Value","Percent","Icon","sup","deg","humidity","windBearing","windSpeed","speed","computedSpeedValue","InfoDetailContainer","InfoDetail","CarouselSettings","resolution","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","easing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","TimeFrameContainer","color","Temperature","ApparentTemperature","theme","selectThemeColor","timeframe","computedTempValue","iconFrame","formatTime","DayContainer","index","selectedIndex","HighTemp","LowTemp","Suns","Sun","Sunrise","Sunset","SunTime","day","selectedDay","sunriseTime","sunsetTime","TimeFrames","Days","dimensionsWidth","weatherForecast","selectWeatherFetchForecast","setSelectedDay","selectedDayIndex","setSelectedDayIndex","days","timeFrames","today","selectedDayIndexHandler","useCallback","Object","keys","indexOf","isEmpty","isUndefined","map","key","className","daySelectHandler","background","weatherBackground","css","WeatherContainer","WeatherDetail","Background","BackgroundSvg","Content","ForecastMobile","Powered","Reference","a","sunriseHour","sunsetHour","dawn","dusk","getWeatherBackground","weatherSVG","includes","href","target"],"mappings":"uJAIMA,EAAqB,SAAAC,GAAK,OAAIA,EAAMC,YAE7BC,EAAwBC,YAAe,CAACJ,IAAqB,SAAAE,GAAU,OAAIA,EAAWG,S,GAE7DD,YAAe,CAACJ,IAAqB,SAAAE,GAAU,OAAIA,EAAWI,U,0BCE9FC,EAAU,SAACC,EAAMC,EAAMC,GAC3B,MAAa,YAATF,GAA+B,WAATA,EACjBG,IAAc,IAAPF,GACXG,GAAGF,GACHG,OAAO,KAGLF,MACJC,GAAGF,GACHG,OAAO,M,slBCdL,IAAMC,EAAgBC,IAAOC,IAAV,IACpB,iDAGOC,EAAgBF,IAAOC,IAAV,IACpB,4DAGOE,EAAoBH,IAAOC,IAAV,IACxB,6EAGOG,EAAOJ,IAAOK,EAAV,IACX,oBAGOC,EAAON,IAAOC,IAAV,IACX,0IAGOM,EAAYP,IAAOK,EAAV,KAETG,EAAOR,IAAOS,KAAV,IACX,gECgDAC,EAAkBC,YAAyB,CAC/CC,eAAgBC,IAChBC,QAASC,IACTC,QAASC,IACTC,UAAWC,MAUEC,cAAQV,EAAiB,CAAEW,eCtFZ,SAAAC,GAAK,MAAK,CACtC7B,KAAM8B,IACNC,QAASF,KDoFIF,EAzEF,SAAC,GAAyF,IAAvFR,EAAsF,EAAtFA,eAAsF,IAAtEE,QAAWW,EAA2D,EAA3DA,KAAMC,EAAqD,EAArDA,SAAYV,EAAyC,EAAzCA,QAASE,EAAgC,EAAhCA,UAAWG,EAAqB,EAArBA,eAAqB,EAC5EM,mBAAS,IADmE,mBAC7FC,EAD6F,KACvFC,EADuF,OAE5EF,mBAAS,IAFmE,mBAE7FjC,EAF6F,KAEvFoC,EAFuF,KAG9FC,EAAuBC,mBAEvBC,EAAiB,SAAAC,GACrBL,EAAQK,EAAUA,EAAQpC,OAAO,iBAAmB,IACpDgC,EAAQI,EAAUA,EAAQpC,OAAO,eAAiB,IAElDiC,EAAqBI,QAAUD,GAAW,MA2B5C,OAlBAE,qBAAU,WAAO,IACP1C,EAAmBkB,EAAnBlB,KAAMC,EAAaiB,EAAbjB,SACdsC,EAAerC,IAAc,IAAPF,GAAaG,GAAGF,IAEtC,IAAM0C,EAAYC,aAAY,WAC5B,GAAI5C,EAAM,CAER,IAAM6C,EAAuB3C,IAAOC,GAAGkC,EAAqBI,QAASxC,GAAU6C,IAAI,EAAG,KAEtFP,EAAeM,MAEhB,KAEH,OAAO,WACLE,cAAcJ,MAEf,CAACzB,IAGF,kBAACb,EAAD,KACE,kBAACG,EAAD,KACE,kBAACE,EAAD,KAAOsB,GAENE,GAAQlC,GACP,kBAACY,EAAD,KACE,kBAACC,EAAD,KAAYqB,GACZ,kBAACpB,EAAD,kBACA,kBAACD,EAAD,KAAYb,KAKlB,kBAACS,EAAD,CAAmBuC,QAAS,kBAAMrB,EAAe,CAAEI,OAAMC,WAAUV,cAtClD,WACnB,IAAM2B,EAAO,OAAGzB,QAAH,IAAGA,OAAH,EAAGA,EAAW0B,QAAO,SAAAC,GAAQ,OAAIA,EAASpB,OAASA,KAEhE,OAAc,OAAPkB,QAAO,IAAPA,OAAA,EAAAA,EAASG,QAAS,EAoCpBC,GAAiB,kBAAC,IAAD,MAAc,kBAAC,IAAD,WE9D3BC,EAAa3D,YAAe,CAFP,SAAAH,GAAK,OAAIA,EAAM+D,eAEqB,SAAAA,GAAW,OAAIA,EAAYC,Q,SCCpFC,EAAc,SAAAC,GAAS,IAC1BC,EAAyBD,EAAzBC,KAAM3D,EAAmB0D,EAAnB1D,KAAMC,EAAayD,EAAbzD,SACd2D,EAAO1D,IAAc,IAAPF,GACjBG,GAAGF,GACHG,OAAO,KACJL,EAAO6D,GAAQ,GAAKA,GAAQ,GAAK,MAAQ,QAE/C,GAAID,EACF,OAAQA,GACN,IAAK,YACH,MAAO,MACT,IAAK,cACH,MAAO,QACT,IAAK,OACH,MAAM,GAAN,OAAU5D,EAAV,SACF,IAAK,OACH,MAAM,GAAN,OAAUA,EAAV,SACF,IAAK,QACH,MAAO,QACT,IAAK,OAEL,IAAK,MACH,MAAM,GAAN,OAAUA,EAAV,WACF,IAAK,SACH,MAAO,SACT,IAAK,oBACH,MAAO,aACT,IAAK,sBACH,MAAO,eACT,IAAK,OACH,MAAO,OACT,IAAK,eACH,MAAO,UACT,IAAK,UACH,MAAO,aACT,QACE,MAAO,QAGb,MAAO,SC9CI8D,EAAO,SAAAC,GAClB,OAAOC,KAAKC,MAAqB,GAAbF,EAAO,IAAW,I,SC+CzBG,EAzBK,SAAC,GAAc,IAAZlE,EAAW,EAAXA,KAoBrB,MAnBmB,CACjB,aAAc,kBAAC,IAAD,MACd,eAAgB,kBAAC,IAAD,MAChB,eAAgB,kBAAC,IAAD,MAChB,iBAAkB,kBAAC,IAAD,MAClB,aAAc,kBAAC,IAAD,MACd,QAAS,kBAAC,IAAD,MACTmE,GAAI,kBAAC,IAAD,MACJ,WAAY,kBAAC,IAAD,MACZC,MAAO,kBAAC,IAAD,MACP,aAAc,kBAAC,IAAD,MACdC,KAAM,kBAAC,IAAD,MACN,YAAa,kBAAC,IAAD,MACbC,KAAM,kBAAC,IAAD,MACN,UAAW,kBAAC,IAAD,MACXC,QAAS,kBAAC,IAAD,MACTC,OAAQ,kBAAC,IAAD,OAGQxE,IAAS,kBAAC,IAAD,O,06BCtCtB,IAAMyE,GAA6BlE,IAAOC,IAAV,KACjC,uLAGOkE,GAAcnE,IAAOC,IAAV,IAClB,qFAGOmE,GAAcpE,IAAOC,IAAV,IAClB,0IAGOoE,GAAuBrE,IAAOK,EAAV,IAC3B,6GAGOiE,GAAOtE,IAAOK,EAAV,IACX,oJAGOkE,GAAQvE,IAAOwE,IAAV,IACZ,sJAGOC,GAAOzE,IAAOS,KAAV,IACX,oCAGOiE,GAAM1E,IAAOC,IAAV,IACV,yCAGO0E,GAAO3E,IAAOC,IAAV,IACX,mFAGO2E,GAAc5E,IAAOS,KAAV,IAClB,qCAGOoE,GAAc7E,IAAOS,KAAV,IAClB,6DAGOqE,GAAa9E,IAAOS,KAAV,IACjB,oDC0BAC,GAAkBC,YAAyB,CAC/CC,eAAgBC,IAChBqC,KAAMF,IASO5B,eAAQV,GAAiB,CAAEqE,WCnFhB,iBAAO,CAC/BtF,KAAMuF,ODkFO5D,EAxDW,SAAC,GAA0C,IAQzC3B,EARCmB,EAAuC,EAAvCA,eAAgBsC,EAAuB,EAAvBA,KAAM6B,EAAiB,EAAjBA,WACzCE,EAAYrE,EAAZqE,QACF5B,EAAOF,EAAYvC,GAUnBsE,EAA0B,MAAThC,EAAe,IAAM,IAE5C,OACE,kBAACgB,GAAD,KACE,kBAACC,GAAD,KACGd,EAAK8B,WAAW,MACf,kBAACd,GAAD,KACE,kBAAC,EAAD,CAAa5E,KAAM4D,KAGrB,kBAACkB,GAAD,CAAOa,IAAI,OAAOC,IAAG,oBAAehC,EAAf,UAGvB,kBAACiB,GAAD,KAAOW,IAGT,kBAACb,GAAD,KACE,kBAACK,GAAD,MArBoBhF,EAqBK,cApBb,MAATyD,EAAeO,KAAKC,MAAM9C,EAAenB,IAAS8D,EAAK3C,EAAenB,MAqBzE,kBAACiF,GAAD,KACE,mCAEF,kBAACC,GAAD,KACE,kBAACC,GAAD,CAAalC,QAASqC,GAAa7B,GACnC,kBAAC2B,GAAD,UACA,kBAACC,GAAD,CAAYpC,QAASqC,GAAaG,S,wxBE9DrC,IAAMI,GAA2BtF,IAAOC,IAAV,KAC/B,8LAGOsF,GAAUvF,IAAOC,IAAV,KACd,2FAGOuF,GAAWxF,IAAOK,EAAV,KACf,6GAGOoF,GAAOzF,IAAOK,EAAV,KACX,6GAGOqF,GAAO1F,IAAOK,EAAV,MAEJsF,GAAO3F,IAAOS,KAAV,KACX,oBAGOmF,GAAQ5F,IAAOS,KAAV,KACZ,oBAGOoF,GAAU7F,IAAOS,KAAV,KACd,0CAGOqF,GAAO9F,IAAOS,KAAV,KACX,uBAGOiE,GAAM1E,IAAO+F,IAAV,MCoCVrF,GAAkBC,YAAyB,CAC/CC,eAAgBC,IAChBqC,KAAMF,IAQO5B,eAAQV,GAARU,EAtDS,SAAC,GAA8B,IAM3B3B,EClCCuG,ED4BFpF,EAA2B,EAA3BA,eAAgBsC,EAAW,EAAXA,KACjC+C,EAA0BrF,EAA1BqF,SAAUC,EAAgBtF,EAAhBsF,YAalB,OACE,kBAACZ,GAAD,KACE,kBAACC,GAAD,KACE,kBAACC,GAAD,KACE,kBAACG,GAAD,sBACA,kBAACC,GAAD,KAAQnC,KAAKC,MAAMuC,IACnB,kBAACJ,GAAD,KACE,kBAAC,KAAD,QAIJ,kBAACJ,GAAD,KACE,kBAACE,GAAD,kBACA,kBAACC,GAAD,KAjBmB,WACzB,MAAgB,MAAT1C,EAAA,UAAkBO,KAAKC,MAAM9C,EAAeuF,WAA5C,mBE1CSC,EF0C8DxF,EAAeuF,UEzCxF1C,KAAKC,MAAc,IAAR0C,IFyCT,SE1CS,IAAAA,EF0DFC,GAAR,KACA,kBAACP,GAAD,KACE,kBAAC,EAAD,CAAarG,MCzDIuG,EDyDgBE,ECxDvCF,GAAO,GAAKA,GAAO,GACd,KACEA,GAAO,IAAMA,GAAO,GACtB,WACEA,GAAO,IAAMA,GAAO,IACtB,QACEA,GAAO,KAAOA,GAAO,IACvB,aACEA,GAAO,KAAOA,GAAO,IACvB,OACEA,GAAO,KAAOA,GAAO,IACvB,YACEA,GAAO,KAAOA,GAAO,IACvB,OAEA,eD6CH,kBAACN,GAAD,KACE,kBAACC,GAAD,wBACA,kBAACC,GAAD,MA7BkBnG,EA6BQ,sBA5BhB,MAATyD,EAAeO,KAAKC,MAAM9C,EAAenB,IAAS8D,EAAK3C,EAAenB,MA6BvE,kBAAC,GAAD,gB,gKG9DH,IAAM6G,GAAsBtG,IAAOC,IAAV,KAC1B,8TCYSsG,IDTUvG,IAAOC,IAAV,KAChB,8LCDa,kBACjB,kBAACqG,GAAD,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,S,8BCPSE,GAAmB,SAAC/G,GAAD,IAAOgH,EAAP,uDAAoB,SAApB,MAAkC,CAChEnH,MAAO,OACPoH,aAAuB,SAATjH,EAAkC,WAAfgH,EAA0B,EAAI,EAAK,EACpEE,eAAyB,SAATlH,EAAkC,WAAfgH,EAA0B,EAAI,EAAK,EACtEG,mBAA6B,SAATnH,EAAkB,IAAM,IAC5CoH,WAAqB,SAATpH,EAAkC,WAAfgH,EAA0B,EAAM,IAAQ,EACvEL,MAAO,IACPU,OAAQ,eACRC,sBAAuB,CACrBC,gBAAiB,CACfC,QAAS,QAEXC,gBAAiB,CACfD,QAAS,QAEXE,gBAAiB,CACfC,KAAM,UACNH,QAAS,OACTI,SAAU,WACVC,IAAc,QAAT7H,EAAiB,OAAS,OAC/B8H,OAAQ,e,wjBCpBd,IAIaC,GAAqBxH,IAAOC,IAAV,KACzB,0PALQ,YAAgB,IAAbwH,EAAY,EAAZA,MACf,MAAiB,UAAVA,EAAsB,kBAAgB,qBAQlC3B,GAAO9F,IAAOC,IAAV,MAEJoE,GAAuBrE,IAAOC,IAAV,KAC3B,oCAGOsE,GAAQvE,IAAOwE,IAAV,KACZ,kDAGOkD,GAAc1H,IAAOC,IAAV,KAClB,uBAGO0H,GAAsB3H,IAAOC,IAAV,KAC1B,uBAGOK,GAAON,IAAOK,EAAV,KACX,wCCkCAK,GAAkBC,YAAyB,CAC/CiH,MAAOC,IACP3E,KAAMF,IASO5B,eAAQV,GAARU,EAnDG,SAAC,GAAgC,IAA9BwG,EAA6B,EAA7BA,MAAO1E,EAAsB,EAAtBA,KAAM4E,EAAgB,EAAhBA,UACxBpI,EAAmBoI,EAAnBpI,KAAMC,EAAamI,EAAbnI,SAKRoI,EAAoB,SAAAtI,GACxB,MAAgB,MAATyD,EAAeO,KAAKC,MAAMoE,EAAU,GAAD,OAAIrI,KAAW8D,EAAKuE,EAAU,GAAD,OAAIrI,MAGvEuI,EAAY7E,EAAY2E,GAE9B,OACE,kBAACN,GAAD,CAAoBC,MAAOG,GACzB,kBAAC,GAAD,KACGI,EAAU7C,WAAW,MACpB,kBAAC,GAAD,KACE,kBAAC,EAAD,CAAa1F,KAAMuI,KAGrB,kBAAC,GAAD,CAAO5C,IAAI,OAAOC,IAAG,oBAAe2C,EAAf,WAIzB,kBAACN,GAAD,KACGK,EAAkB,eACnB,mCAGF,kBAACJ,GAAD,KACGI,EAAkB,uBACnB,mCAGF,kBAAC,GAAD,KAAOE,aAAWvI,EAAMC,EAAU,e,khCCxDxC,IAaauI,GAAelI,IAAOC,IAAV,KACnB,geAdQ,SAAC,GAAqC,IAAnCwH,EAAkC,EAAlCA,MAIf,OAJiD,EAA3BU,QAA2B,EAApBC,cAEjB,UAAVX,EAAsB,gGAAwC,gGAEX,QAGxC,SAAC,GAA6B,EAA3BU,MAA2B,EAApBC,cACvB,MAAS,0DAUE9H,GAAON,IAAOC,IAAV,KACX,0JAGO6F,GAAO9F,IAAOC,IAAV,KACX,gFAGOoE,GAAuBrE,IAAOC,IAAV,KAC3B,gLAGOsE,GAAQvE,IAAOwE,IAAV,KACZ,6LAGOkD,GAAc1H,IAAOC,IAAV,KAClB,4LAGOoI,GAAWrI,IAAOC,IAAV,KACf,iHAGOqI,GAAUtI,IAAOC,IAAV,KACd,+DAGOsI,GAAOvI,IAAOC,IAAV,KACX,qOAGOuI,GAAMxI,IAAOC,IAAV,KACV,2OAGOwI,GAAUzI,IAAOK,EAAV,KACd,gJAGOqI,GAAS1I,IAAOK,EAAV,KACb,gJAGOsI,GAAU3I,IAAOK,EAAV,MC0BdK,GAAkBC,YAAyB,CAC/CiH,MAAOC,IACP3E,KAAMF,IAYO5B,eAAQV,GAARU,EA3EH,SAAC,GAA6D,IAA3DwH,EAA0D,EAA1DA,IAAKT,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,cAAeS,EAA+B,EAA/BA,YAAajB,EAAkB,EAAlBA,MAAO1E,EAAW,EAAXA,KACpDxD,EAAmBkJ,EAAnBlJ,KAAMC,EAAaiJ,EAAbjJ,SACRiC,EAAOqG,aAAWvI,EAAMC,EAAU,OAElC0D,EAAOF,EAAYyF,GAKnBb,EAAoB,SAAAtI,GACxB,MAAgB,MAATyD,EAAeO,KAAKC,MAAMkF,EAAI,cAAD,OAAenJ,KAAW8D,EAAKqF,EAAI,cAAD,OAAenJ,MAGvF,OACE,kBAACyI,GAAD,CAAcT,MAAOG,EAAOO,MAAOA,EAAOC,cAAeA,EAAe1F,QAAS,kBAAMmG,EAAY,CAAED,UACnG,kBAAC,GAAD,KAAOhH,GAEP,kBAAC,GAAD,KACGuB,EAAYyF,GAAKzD,WAAW,MAC3B,kBAAC,GAAD,KACE,kBAAC,EAAD,CAAa1F,KAAM4D,KAGrB,kBAAC,GAAD,CAAO+B,IAAI,OAAOC,IAAG,oBAAehC,EAAf,WAIzB,kBAAC,GAAD,KACE,kBAACgF,GAAD,KACGN,EAAkB,QACnB,mCAGF,kBAACO,GAAD,KACGP,EAAkB,OACnB,oCAIJ,kBAACQ,GAAD,KACE,kBAACC,GAAD,KACE,kBAACC,GAAD,KACE,kBAAC,EAAD,CAAahJ,KAAK,aAGpB,kBAACkJ,GAAD,KAAUV,aAAWW,EAAIE,YAAaF,EAAIjJ,SAAU,UAGtD,kBAAC6I,GAAD,KACE,kBAACE,GAAD,KACE,kBAAC,EAAD,CAAajJ,KAAK,YAEpB,kBAACkJ,GAAD,KAAUV,aAAWW,EAAIG,WAAYH,EAAIjJ,SAAU,gB,gKC/EtD,IAAMqJ,GAAahJ,IAAOC,IAAV,KACjB,4FAGOgJ,GAAOjJ,IAAOC,IAAV,KACX,8JCuFAS,GAAkBC,YAAyB,CAC/CuI,gBAAiB9J,EACjBwB,eAAgBC,IAChBsI,gBAAiBC,MASJhI,eAAQV,GAARU,EAvFE,SAAC,GAA0D,IAAxD8H,EAAuD,EAAvDA,gBAAiBtI,EAAsC,EAAtCA,eAAgBuI,EAAsB,EAAtBA,gBAAsB,EACnCxH,mBAAS,IAD0B,mBAClEkH,EADkE,KACrDQ,EADqD,OAEzB1H,mBAAS,GAFgB,mBAElE2H,EAFkE,KAEhDC,EAFgD,KAIjE7J,EAAmBkB,EAAnBlB,KAAMC,EAAaiB,EAAbjB,SACN6J,EAAqBL,EAArBK,KAAMC,EAAeN,EAAfM,WACRC,EAAQzB,aAAWvI,EAAMC,EAAU,cAEnCgK,EAA0BC,uBAC9B,SAAAf,GACE,IAAMV,EAAQ0B,OAAOC,KAAKN,GAAMO,QAAQlB,GACxCU,GAA+B,IAAXpB,EAAeA,EAAQ,KAE7C,CAACqB,IAmBH,OAPApH,qBAAU,WACH4H,aAAQb,IAAqBc,aAAYd,KAC5CE,EAAeG,EAAKE,GAASA,EAAQ,IACrCC,EAAwBH,EAAKE,GAASA,EAAQ,OAE/C,CAACP,EAAiBK,EAAME,EAAOC,IAGhC,oCACGT,GAAmB,IAClB,kBAACF,GAAD,KACGS,EAAWZ,IACV,kBAAC,KAAarC,GAAiB,OAAQ,UACpCiD,EAAWZ,GAAaqB,KAAI,SAACpC,EAAWK,GAAZ,OAC3B,kBAAC,GAAD,CAAWL,UAAWA,EAAWqC,IAAKhC,SAM9C,yBAAKiC,UAAU,QACZX,EAAWZ,IACV,kBAAC,KAAarC,GAAiB,QAC5BiD,EAAWZ,GAAaqB,KAAI,SAACpC,EAAWK,GAAZ,OAC3B,kBAAC,GAAD,CAAWL,UAAWA,EAAWqC,IAAKhC,SAOhD,kBAACc,GAAD,KACGY,OAAOC,KAAKX,EAAgBK,MAAMU,KAAI,SAACtB,EAAKT,GAC3C,OACE,kBAAC,GAAD,CACES,IAAKO,EAAgBK,KAAKZ,GAC1BuB,IAAKhC,EACLA,MAAOA,EACPC,cAAekB,EACfT,YAAa,kBA5CA,SAAAD,GACvBS,EAAeT,GACfe,EAAwBf,GA0CKyB,CAAiBzB,c,0gCCjFlD,IAAMnB,GAAQ,YAAgB,IAAbA,EAAY,EAAZA,MACf,MAAiB,UAAVA,EAAsB,wCAA4B,yCAGrD6C,GAAa,SAAC,GAClB,MAAiB,UADe,EAAZ7C,MACO,WAAa,WAGpC8C,GAAoBC,YAAH,MAaVC,GAAmBzK,IAAOC,IAAV,KACvB,qLAGOyK,GAAgB1K,IAAOC,IAAV,KACpB,mYACFwH,GAAS6C,IAGAK,GAAa3K,IAAOwE,IAAV,KACjB,yDACF+F,IAGSK,GAAgB5K,IAAOwE,IAAV,KACpB,mHACF+F,IAGSM,GAAU7K,IAAOC,IAAV,KACd,uJAOO6K,GAAiB9K,IAAOC,IAAV,MAEd8K,GAAU/K,IAAOK,EAAV,KACd,wDACFoH,GAAS6C,IAGAU,GAAYhL,IAAOiL,EAAV,KAChB,+BCcAvK,GAAkBC,YAAyB,CAC/CiH,MAAOC,IACPqB,gBAAiB9J,EACjBwB,eAAgBC,MASHO,sBAAQV,GAARU,EA3DC,SAAC,GAAgD,IAA9CwG,EAA6C,EAA7CA,MAAOsB,EAAsC,EAAtCA,gBAAiBtI,EAAqB,EAArBA,eACjCyC,EAASzC,EAATyC,KACFkH,EzBR4B,SAAAnH,GAAS,IACnCC,EAAoCD,EAApCC,KAAM1D,EAA8ByD,EAA9BzD,SAAUqE,EAAoBZ,EAApBY,QAASC,EAAWb,EAAXa,OAE3BiH,EAAc1L,EAAQ,UAAWwE,EAASrE,GAC1CwL,EAAa3L,EAAQ,SAAUyE,EAAQtE,GACvC2D,EAAO9D,EAAQ,OAAQ,EAAGG,GAE1BF,EAAO6D,GAAQ4H,EAAc,GAAK5H,GAAQ6H,EAAa,MAAQ,QAE/DC,EAAO9H,IAAS4H,EAAc,GAAK5H,IAAS4H,EAE5CG,EAAO/H,IAAS6H,EAAa,GAAK7H,IAAS6H,EAEjD,GAAI9H,EACF,OAAQA,GACN,IAAK,YACH,OAAOgI,EAAO,OAASD,EAAO,OAAS,YACzC,IAAK,cACH,OAAOC,EAAO,OAASD,EAAO,OAAS,cACzC,IAAK,OAEL,IAAK,OAEL,IAAK,QACH,MAAM,YAAN,OAAmB3L,GACrB,IAAK,OACH,MAAM,UAAN,OAAiBA,GACnB,IAAK,MACH,MAAM,YAAN,OAAmBA,GACrB,IAAK,SACH,MAAM,UAAN,OAAiBA,GACnB,IAAK,oBACH,MAAO,aACT,IAAK,sBACH,MAAO,eACT,IAAK,OACH,MAAM,YAAN,OAAmBA,GACrB,IAAK,eACH,MAAO,eACT,IAAK,UACH,MAAO,UACT,QACE,MAAO,YAIb,MAAO,YyBtCmB6L,CAAqB1K,GACzC2K,EAAsB,SAATlI,EAAkB,OAAS,OAG9C,OACE,kBAACoH,GAAD,KACE,kBAACC,GAAD,CAAejD,MAAOG,GACpB,kBAAC+C,GAAD,CAAYlD,MAAOG,EAAOxC,IAAI,qBAAqBC,IAAG,gCAA2BkF,EAA3B,UAL1C,CAAC,OAAQ,OAAQ,QAAS,QAO3BiB,SAASnI,IAClB,kBAACuH,GAAD,CAAenD,MAAOG,EAAOxC,IAAI,MAAMC,IAAG,gCAA2BkG,EAA3B,UAG3CrC,GAAmB,IAClB,kBAAC2B,GAAD,KACE,kBAAC,EAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,OAGF,oCACE,kBAACA,GAAD,KACE,kBAAC,EAAD,MACA,kBAAC,GAAD,OAGF,kBAACC,GAAD,KACE,kBAAC,GAAD,SAMR,kBAACC,GAAD,CAAStD,MAAOG,GAAhB,iBAEE,kBAACoD,GAAD,CAAWS,KAAK,sBAAsBC,OAAO,UAA7C","file":"static/js/6.bfac137c.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\n\n/* -------------------------------------------------------------------------- */\n\nconst dimensionsSelector = state => state.dimensions;\n\nexport const selectDimensionsWidth = createSelector([dimensionsSelector], dimensions => dimensions.width);\n\nexport const selectDimensionsHeight = createSelector([dimensionsSelector], dimensions => dimensions.height);\n","import moment from 'moment-timezone';\n\n/* -------------------------------------------------------------------------- */\n\n/**\n * format time into an hour\n * @param {String} type ( sunrise | sunset | hour )\n * @param {Number} time ( sunriseTime, sunsetTime, 0 in case of hour )\n * @param {String} timezone ( Ex: Pacific/Auckland )\n */\nconst getHour = (type, time, timezone) => {\n  if (type === 'sunrise' || type === 'sunset') {\n    return moment(time * 1000)\n      .tz(timezone)\n      .format('H');\n  }\n\n  return moment()\n    .tz(timezone)\n    .format('H');\n};\n\nexport const getWeatherBackground = data => {\n  const { icon, timezone, sunrise, sunset } = data;\n  // Dormat sunrise and sunset in weatherCurrent of data into an hour\n  const sunriseHour = getHour('sunrise', sunrise, timezone);\n  const sunsetHour = getHour('sunset', sunset, timezone);\n  const hour = getHour('hour', 0, timezone);\n  // Subtract 1hr from sunriseHour and add 1hr to sunsetHour to compensate for minutes since moment will format 7:23 as 7 and 17:27 as 17\n  const type = hour >= sunriseHour - 1 && hour <= sunsetHour ? 'day' : 'night';\n  // To show sunrise weather background 1hr before and during the sunrise hour\n  const dawn = hour === sunriseHour - 1 || hour === sunriseHour;\n  // To show sunset weather background 1hr before and during the sunset hour\n  const dusk = hour === sunsetHour - 1 || hour === sunsetHour;\n\n  if (icon) {\n    switch (icon) {\n      case 'clear-day':\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-day';\n      case 'clear-night':\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-night';\n      case 'rain':\n        return `overcast-${type}`;\n      case 'snow':\n        return `overcast-${type}`;\n      case 'sleet':\n        return `overcast-${type}`;\n      case 'wind':\n        return `cloudy-${type}`;\n      case 'fog':\n        return `overcast-${type}`;\n      case 'cloudy':\n        return `cloudy-${type}`;\n      case 'partly-cloudy-day':\n        return 'cloudy-day';\n      case 'partly-cloudy-night':\n        return 'cloudy-night';\n      case 'hail':\n        return `overcast-${type}`;\n      case 'thunderstorm':\n        return 'thunderstorm';\n      case 'tornado':\n        return 'tornado';\n      default:\n        return 'clear-day';\n    }\n  }\n\n  return 'clear-day';\n};\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nexport const InfoContainer = styled.div`\n  ${tw`flex justify-between`}\n`;\n\nexport const TimeContainer = styled.div`\n  ${tw`pt-4 px-4`}\n`;\n\nexport const BookmarkContainer = styled.div`\n  ${tw`mt-6 mr-4 cursor-pointer text-xl`}\n`;\n\nexport const City = styled.p`\n  ${tw`font-bold`}\n`;\n\nexport const Time = styled.div`\n  ${tw`sm:flex-col md:flex md:flex-row font-light`}\n`;\n\nexport const Paragraph = styled.p``;\n\nexport const Span = styled.span`\n  ${tw`hidden md:block`}\n`;\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectAddress, selectLatlong } from 'redux/address-fetch/address-fetch.selectors';\nimport { selectWeatherFetchCurrent } from 'redux/weather-fetch/weather-fetch.selectors';\nimport { favoritesSelector } from 'redux/favorites/favorites.selectors';\nimport { toggleFavorite } from 'redux/favorites/favorites.actions';\n\nimport moment from 'moment-timezone';\nimport { FaRegHeart, FaHeart } from 'react-icons/fa';\n\nimport { InfoContainer, TimeContainer, BookmarkContainer, City, Time, Paragraph, Span } from './info.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst Info = ({ weatherCurrent, address: { name, fullName }, latlong, favorites, toggleFavorite }) => {\n  const [date, setDate] = useState('');\n  const [time, setTime] = useState('');\n  const formattedDateTimeRef = useRef();\n\n  const datetimeSetter = dateObj => {\n    setDate(dateObj ? dateObj.format('MMMM Do, YYYY') : '');\n    setTime(dateObj ? dateObj.format('dddd h:mm A') : '');\n\n    formattedDateTimeRef.current = dateObj || null;\n  };\n\n  const isBookmarked = () => {\n    const matched = favorites?.filter(favorite => favorite.name === name);\n\n    return matched?.length > 0;\n  };\n\n  useEffect(() => {\n    const { time, timezone } = weatherCurrent;\n    datetimeSetter(moment(time * 1000).tz(timezone));\n\n    const dateTimer = setInterval(() => {\n      if (time) {\n        // Update date and time every second only when there is a valid timestamp\n        const formattedDateTimeObj = moment.tz(formattedDateTimeRef.current, timezone).add(1, 's');\n\n        datetimeSetter(formattedDateTimeObj);\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(dateTimer);\n    };\n  }, [weatherCurrent]);\n\n  return (\n    <InfoContainer>\n      <TimeContainer>\n        <City>{fullName}</City>\n\n        {date && time && (\n          <Time>\n            <Paragraph>{date}</Paragraph>\n            <Span>&nbsp;|&nbsp;</Span>\n            <Paragraph>{time}</Paragraph>\n          </Time>\n        )}\n      </TimeContainer>\n\n      <BookmarkContainer onClick={() => toggleFavorite({ name, fullName, latlong })}>\n        {isBookmarked() ? <FaHeart /> : <FaRegHeart />}\n      </BookmarkContainer>\n    </InfoContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  weatherCurrent: selectWeatherFetchCurrent,\n  address: selectAddress,\n  latlong: selectLatlong,\n  favorites: favoritesSelector,\n});\n\nInfo.propTypes = {\n  weatherCurrent: PropTypes.object,\n  address: PropTypes.object,\n  latlong: PropTypes.string,\n  favorites: PropTypes.array,\n};\n\nexport default connect(mapStateToProps, { toggleFavorite })(Info);\n","import { TOGGLE_FAVORITE } from './favorites.types';\n\n/* -------------------------------------------------------------------------- */\n\nexport const toggleFavorite = value => ({\n  type: TOGGLE_FAVORITE,\n  payload: value,\n});\n","import { createSelector } from 'reselect';\n\n/* -------------------------------------------------------------------------- */\n\nconst selectWeatherUnitSelector = state => state.weatherUnit;\n\nexport const selectUnit = createSelector([selectWeatherUnitSelector], weatherUnit => weatherUnit.unit);\n","import moment from 'moment-timezone';\n\n/* -------------------------------------------------------------------------- */\n\n/**\n * @param {Object} data\n */\nexport const weatherIcon = data => {\n  const { icon, time, timezone } = data;\n  const hour = moment(time * 1000)\n    .tz(timezone)\n    .format('H');\n  const type = hour >= 6 && hour <= 18 ? 'day' : 'night';\n\n  if (icon) {\n    switch (icon) {\n      case 'clear-day':\n        return 'day';\n      case 'clear-night':\n        return 'night';\n      case 'rain':\n        return `${type}-rain`;\n      case 'snow':\n        return `${type}-snow`;\n      case 'sleet':\n        return 'sleet';\n      case 'wind':\n        return `${type}-cloudy`;\n      case 'fog':\n        return `${type}-cloudy`;\n      case 'cloudy':\n        return 'cloudy';\n      case 'partly-cloudy-day':\n        return 'day-cloudy';\n      case 'partly-cloudy-night':\n        return 'night-cloudy';\n      case 'hail':\n        return 'hail';\n      case 'thunderstorm':\n        return 'thunder';\n      case 'tornado':\n        return 'wi-tornado';\n      default:\n        return 'wi-na';\n    }\n  }\n  return 'wi-na';\n};\n","export const fToC = temp => {\n  return Math.round(((temp - 32) * 5) / 9);\n};\n\nexport const cToF = temp => {\n  return Math.round((temp * 9) / 5 + 32);\n};\n","import React from 'react';\n\nimport {\n  WiDirectionUp,\n  WiDirectionUpRight,\n  WiDirectionRight,\n  WiDirectionDownRight,\n  WiDirectionDown,\n  WiDirectionDownLeft,\n  WiDirectionLeft,\n  WiDirectionUpLeft,\n  WiDayFog,\n  WiNightFog,\n  WiDayCloudyWindy,\n  WiNightAltCloudyWindy,\n  WiTornado,\n  WiNa,\n  WiSunrise,\n  WiSunset,\n} from 'react-icons/wi';\n\n/* -------------------------------------------------------------------------- */\n\nconst WeatherIcon = ({ type }) => {\n  const ICON_TYPES = {\n    'wi-day-fog': <WiDayFog />,\n    'wi-night-fog': <WiNightFog />,\n    'wi-day-windy': <WiDayCloudyWindy />,\n    'wi-night-windy': <WiNightAltCloudyWindy />,\n    'wi-tornado': <WiTornado />,\n    'wi-na': <WiNa />,\n    up: <WiDirectionUp />,\n    'up-right': <WiDirectionUpRight />,\n    right: <WiDirectionRight />,\n    'down-right': <WiDirectionDownRight />,\n    down: <WiDirectionDown />,\n    'down-left': <WiDirectionDownLeft />,\n    left: <WiDirectionLeft />,\n    'up-left': <WiDirectionUpLeft />,\n    sunrise: <WiSunrise />,\n    sunset: <WiSunset />,\n  };\n\n  return ICON_TYPES[type] || <WiNa />;\n};\n\n/* -------------------------------------------------------------------------- */\n\nexport default WeatherIcon;\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nexport const InfoDetailSummaryContainer = styled.div`\n  ${tw`flex flex-row justify-between sm:justify-start sm:w-full lg:w-1/2`}\n`;\n\nexport const SummaryIcon = styled.div`\n  ${tw`flex flex-col justify-center items-center`}\n`;\n\nexport const SummaryTemp = styled.div`\n  ${tw`flex justify-start items-center sm:-mt-3 sm:ml-3`}\n`;\n\nexport const WeatherIconContainer = styled.p`\n  ${tw`text-6xl sm:mx-2 mt-2`}\n`;\n\nexport const Text = styled.p`\n  ${tw`hidden sm:flex font-medium -mt-2 ml-3 capitalize`}\n`;\n\nexport const Image = styled.img`\n  ${tw`-mt-2 -ml-4 sm:mx-0 w-32 h-32 object-contain`}\n`;\n\nexport const Temp = styled.span`\n  ${tw`text-6xl font-bold`}\n`;\n\nexport const Sup = styled.div`\n  ${tw`-mt-8 text-3xl`}\n`;\n\nexport const Unit = styled.div`\n  ${tw`-mt-10 mx-2 text-xl`}\n`;\n\nexport const CurrentUnit = styled.span`\n  ${tw`cursor-pointer font-bold`}\n`;\n\nexport const VerticalBar = styled.span`\n  ${tw`mx-1 opacity-25`}\n`;\n\nexport const ToggleUnit = styled.span`\n  ${tw`cursor-pointer font-light opacity-75`}\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectWeatherFetchCurrent } from 'redux/weather-fetch/weather-fetch.selectors';\nimport { selectUnit } from 'redux/weather-unit/weather-unit.selectors';\nimport { toggleUnit } from 'redux/weather-unit/weather-unit.actions';\n\nimport { weatherIcon } from 'utils/weather/weather-icon';\nimport { fToC } from 'utils/weather/temperature-convert';\n\nimport WeatherIcon from 'components/weather/weather-icon/weather-icon.components';\n\nimport {\n  InfoDetailSummaryContainer,\n  SummaryIcon,\n  SummaryTemp,\n  WeatherIconContainer,\n  Image,\n  Text,\n  Temp,\n  Sup,\n  Unit,\n  CurrentUnit,\n  VerticalBar,\n  ToggleUnit,\n} from './info-detail-summary.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst InfoDetailSummary = ({ weatherCurrent, unit, toggleUnit }) => {\n  const { summary } = weatherCurrent;\n  const icon = weatherIcon(weatherCurrent);\n\n  /**\n   * type can be `temperature` or `apparentTemperature`\n   * @param {String} type\n   */\n  const computedTempValue = type => {\n    return unit === 'F' ? Math.round(weatherCurrent[type]) : fToC(weatherCurrent[type]);\n  };\n\n  const unselectedUnit = unit === 'C' ? 'F' : 'C';\n\n  return (\n    <InfoDetailSummaryContainer>\n      <SummaryIcon>\n        {icon.startsWith('wi') ? (\n          <WeatherIconContainer>\n            <WeatherIcon type={icon} />\n          </WeatherIconContainer>\n        ) : (\n          <Image alt=\"icon\" src={`./weather/${icon}.svg`} />\n        )}\n\n        <Text>{summary}</Text>\n      </SummaryIcon>\n\n      <SummaryTemp>\n        <Temp>{computedTempValue('temperature')}</Temp>\n        <Sup>\n          <sup>o</sup>\n        </Sup>\n        <Unit>\n          <CurrentUnit onClick={toggleUnit}>{unit}</CurrentUnit>\n          <VerticalBar>|</VerticalBar>\n          <ToggleUnit onClick={toggleUnit}>{unselectedUnit}</ToggleUnit>\n        </Unit>\n      </SummaryTemp>\n    </InfoDetailSummaryContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  weatherCurrent: selectWeatherFetchCurrent,\n  unit: selectUnit,\n});\n\nInfoDetailSummary.propTypes = {\n  weatherCurrent: PropTypes.object,\n  unit: PropTypes.string,\n  toggleUnit: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, { toggleUnit })(InfoDetailSummary);\n","import { TOGGLE_UNIT } from './weather-unit.types';\n\n/* -------------------------------------------------------------------------- */\n\nexport const toggleUnit = () => ({\n  type: TOGGLE_UNIT,\n});\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nexport const InfoDetailOtherContainer = styled.div`\n  ${tw`flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2`}\n`;\n\nexport const Wrapper = styled.div`\n  ${tw`text-sm sm:text-lg ml-8`}\n`;\n\nexport const Humidity = styled.p`\n  ${tw`flex flex-row sm:my-2`}\n`;\n\nexport const Wind = styled.p`\n  ${tw`flex items-center sm:my-2`}\n`;\n\nexport const Feel = styled.p``;\n\nexport const Name = styled.span`\n  ${tw`font-light`}\n`;\n\nexport const Value = styled.span`\n  ${tw`font-bold`}\n`;\n\nexport const Percent = styled.span`\n  ${tw`text-sm mt-2`}\n`;\n\nexport const Icon = styled.span`\n  ${tw`text-3xl`}\n`;\n\nexport const Sup = styled.sup``;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectWeatherFetchCurrent } from 'redux/weather-fetch/weather-fetch.selectors';\nimport { selectUnit } from 'redux/weather-unit/weather-unit.selectors';\n\nimport { FiPercent } from 'react-icons/fi';\n\nimport { fToC } from 'utils/weather/temperature-convert';\nimport { mToK } from 'utils/weather/speed-convert';\nimport { windDirection } from 'utils/weather/wind-direction';\n\nimport WeatherIcon from 'components/weather/weather-icon/weather-icon.components';\n\nimport {\n  InfoDetailOtherContainer,\n  Wrapper,\n  Humidity,\n  Wind,\n  Feel,\n  Name,\n  Value,\n  Percent,\n  Icon,\n  Sup,\n} from './info-detail-other.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst InfoDetailOther = ({ weatherCurrent, unit }) => {\n  const { humidity, windBearing } = weatherCurrent;\n  /**\n   * type can be `temperature` or `apparentTemperature`\n   * @param {String} type\n   */\n  const computedTempValue = type => {\n    return unit === 'F' ? Math.round(weatherCurrent[type]) : fToC(weatherCurrent[type]);\n  };\n\n  const computedSpeedValue = () => {\n    return unit === 'F' ? `${Math.round(weatherCurrent.windSpeed)} mph` : `${mToK(weatherCurrent.windSpeed)} kmph`;\n  };\n\n  return (\n    <InfoDetailOtherContainer>\n      <Wrapper>\n        <Humidity>\n          <Name>Humidity:&nbsp;</Name>\n          <Value>{Math.round(humidity)}</Value>\n          <Percent>\n            <FiPercent />\n          </Percent>\n        </Humidity>\n\n        <Wind>\n          <Name>Wind:&nbsp;</Name>\n          <Value>{computedSpeedValue()} </Value>\n          <Icon>\n            <WeatherIcon type={windDirection(windBearing)} />\n          </Icon>\n        </Wind>\n\n        <Feel>\n          <Name>Feels like:&nbsp;</Name>\n          <Value>{computedTempValue('apparentTemperature')}</Value>\n          <Sup>o</Sup>\n        </Feel>\n      </Wrapper>\n    </InfoDetailOtherContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\nconst mapStateToProps = createStructuredSelector({\n  weatherCurrent: selectWeatherFetchCurrent,\n  unit: selectUnit,\n});\n\nInfoDetailOther.propTypes = {\n  weatherCurrent: PropTypes.object,\n  unit: PropTypes.string,\n};\n\nexport default connect(mapStateToProps)(InfoDetailOther);\n","/**\n * @param {Number} deg\n */\nexport const windDirection = deg => {\n  if (deg >= 0 && deg <= 45) {\n    return 'up';\n  } else if (deg >= 46 && deg <= 90) {\n    return 'up-right';\n  } else if (deg >= 91 && deg <= 135) {\n    return 'right';\n  } else if (deg >= 136 && deg <= 180) {\n    return 'down-right';\n  } else if (deg >= 181 && deg <= 225) {\n    return 'down';\n  } else if (deg >= 226 && deg <= 270) {\n    return 'down-left';\n  } else if (deg >= 271 && deg <= 315) {\n    return 'left';\n  } else {\n    return 'up-left';\n  }\n};\n","export const mToK = speed => {\n  return Math.round(speed * 1.6);\n};\n\nexport const kToM = speed => {\n  return Math.round(speed * 0.6);\n};\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nexport const InfoDetailContainer = styled.div`\n  ${tw`sm:flex-col md:flex md:flex-row justify-between my-2 px-6 sm:mt-5 sm:mb-5 sm:px-4`}\n`;\n\nexport const OtherInfo = styled.div`\n  ${tw`flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2`}\n`;\n","import React from 'react';\n\nimport InfoDetailSummary from 'components/weather/info-detail-summary/info-detail-summary.component';\nimport InfoDetailOther from 'components/weather/info-detail-other/info-detail-other.component';\n\nimport { InfoDetailContainer } from './info-detail.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst InfoDetail = () => (\n  <InfoDetailContainer>\n    <InfoDetailSummary />\n    <InfoDetailOther />\n  </InfoDetailContainer>\n);\n\n/* -------------------------------------------------------------------------- */\n\nexport default InfoDetail;\n","/**\n * Carousel Settings for nuka-carousel\n * @param {String} type\n * @param {String} resolution ( mobile || tablet )\n */\nexport const CarouselSettings = (type, resolution = 'mobile') => ({\n  width: '100%',\n  slidesToShow: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\n  slidesToScroll: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\n  initialSlideHeight: type === 'time' ? 100 : 200,\n  slideWidth: type === 'time' ? (resolution === 'tablet' ? 1.0 : 0.95) : 1.0,\n  speed: 1000,\n  easing: 'easeSinInOut',\n  defaultControlsConfig: {\n    prevButtonStyle: {\n      display: 'none',\n    },\n    nextButtonStyle: {\n      display: 'none',\n    },\n    pagingDotsStyle: {\n      fill: '#A1A6B4',\n      display: 'flex',\n      position: 'relative',\n      top: type === 'day' ? '25px' : '35px',\n      margin: '10px 5px',\n    },\n  },\n});\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nconst color = ({ color }) => {\n  return color === 'light' ? tw`text-dark` : tw`text-light`;\n};\n\nexport const TimeFrameContainer = styled.div`\n  ${tw`border-none flex flex-col justify-start items-center mx-3 mb-3 w-full font-light md:text-light`}\n  ${color}\n`;\n\nexport const Icon = styled.div``;\n\nexport const WeatherIconContainer = styled.div`\n  ${tw`text-5xl mt-4`}\n`;\n\nexport const Image = styled.img`\n  ${tw`w-16 h-16 object-contain`}\n`;\n\nexport const Temperature = styled.div`\n  ${tw`text-lg`}\n`;\n\nexport const ApparentTemperature = styled.div`\n  ${tw`text-sm`}\n`;\n\nexport const Time = styled.p`\n  ${tw`text-sm font-medium`}\n`;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectThemeColor } from 'redux/theme/theme.selectors';\nimport { selectUnit } from 'redux/weather-unit/weather-unit.selectors';\n\nimport { fToC } from 'utils/weather/temperature-convert';\nimport { formatTime } from 'utils/weather/format-time';\nimport { weatherIcon } from 'utils/weather/weather-icon';\n\nimport WeatherIcon from 'components/weather/weather-icon/weather-icon.components';\n\n// Styled\nimport {\n  TimeFrameContainer,\n  Icon,\n  WeatherIconContainer,\n  Image,\n  Temperature,\n  ApparentTemperature,\n  Time,\n} from './time-frame.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst TimeFrame = ({ theme, unit, timeframe }) => {\n  const { time, timezone } = timeframe;\n  /**\n   * type can be `temperature` or `apparentTemperature`\n   * @param {String} type\n   */\n  const computedTempValue = type => {\n    return unit === 'F' ? Math.round(timeframe[`${type}`]) : fToC(timeframe[`${type}`]);\n  };\n\n  const iconFrame = weatherIcon(timeframe);\n\n  return (\n    <TimeFrameContainer color={theme}>\n      <Icon>\n        {iconFrame.startsWith('wi') ? (\n          <WeatherIconContainer>\n            <WeatherIcon type={iconFrame} />\n          </WeatherIconContainer>\n        ) : (\n          <Image alt=\"icon\" src={`./weather/${iconFrame}.svg`} />\n        )}\n      </Icon>\n\n      <Temperature>\n        {computedTempValue('temperature')}\n        <sup>o</sup>\n      </Temperature>\n\n      <ApparentTemperature>\n        {computedTempValue('apparentTemperature')}\n        <sup>o</sup>\n      </ApparentTemperature>\n\n      <Time>{formatTime(time, timezone, 'h:mm A')}</Time>\n    </TimeFrameContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\nconst mapStateToProps = createStructuredSelector({\n  theme: selectThemeColor,\n  unit: selectUnit,\n});\n\nTimeFrame.propTypes = {\n  theme: PropTypes.string,\n  unit: PropTypes.string,\n  timeframe: PropTypes.object,\n};\n\nexport default connect(mapStateToProps)(TimeFrame);\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nconst check = ({ color, index, selectedIndex }) => {\n  const textAndBackground =\n    color === 'light' ? tw`text-light bg-dark md:border-dark` : tw`text-dark bg-light md:border-light`;\n\n  return index === selectedIndex ? textAndBackground : null;\n};\n\nconst border = ({ index, selectedIndex }) => {\n  return tw`md:border-r${index === 7 || index === selectedIndex - 1 ? '-0' : ''} md:border-l${\n    index === 0 || index === selectedIndex + 1 ? '-0' : ''\n  }`;\n};\n\nexport const DayContainer = styled.div`\n  ${tw`md:border-t md:border-b-0 md:border-light md:hover:border-light md:hover:bg-light md:hover:text-black items-center text-center sm:flex-1 sm:py-1 sm:pb-3 cursor-pointer flex flex-row flex-no-wrap sm:flex-col sm:flex-wrap justify-around items-center px-2`}\n  ${check} ${border}\n`;\n\nexport const Time = styled.div`\n  ${tw`flex w-1/6 sm:w-full sm:justify-center text-base font-light sm:font-medium`}\n`;\n\nexport const Icon = styled.div`\n  ${tw`flex w-1/6 sm:w-full`}\n`;\n\nexport const WeatherIconContainer = styled.div`\n  ${tw`my-1 sm:mt-1 sm:mb-3 mx-auto text-3xl`}\n`;\n\nexport const Image = styled.img`\n  ${tw`sm:-mt-3 sm:-mb-1 mx-auto w-12 h-12 sm:w-16 sm:h-16 object-contain`}\n`;\n\nexport const Temperature = styled.div`\n  ${tw`flex flex-row justify-center items-center font-light w-1/4 sm:w-full mt-1 sm:mt-0`}\n`;\n\nexport const HighTemp = styled.div`\n  ${tw`mx-2 text-xs sm:text-sm`}\n`;\n\nexport const LowTemp = styled.div`\n  ${tw`mx-2 text-xs`}\n`;\n\nexport const Suns = styled.div`\n  ${tw`flex flex-row justify-around sm:justify-center sm:flex sm:flex-col w-5/12 sm:w-full font-light mt-1`}\n`;\n\nexport const Sun = styled.div`\n  ${tw`flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm`}\n`;\n\nexport const Sunrise = styled.p`\n  ${tw`text-xl lg:text-2xl text-sun mr-2 md:mr-3`}\n`;\n\nexport const Sunset = styled.p`\n  ${tw`text-xl lg:text-2xl text-sun mr-2 md:mr-1`}\n`;\n\nexport const SunTime = styled.p``;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectThemeColor } from 'redux/theme/theme.selectors';\nimport { selectUnit } from 'redux/weather-unit/weather-unit.selectors';\n\nimport { fToC } from 'utils/weather/temperature-convert';\nimport { weatherIcon } from 'utils/weather/weather-icon';\nimport { formatTime } from 'utils/weather/format-time';\n\nimport WeatherIcon from 'components/weather/weather-icon/weather-icon.components';\n\nimport {\n  DayContainer,\n  Time,\n  Icon,\n  WeatherIconContainer,\n  Image,\n  Temperature,\n  HighTemp,\n  LowTemp,\n  Suns,\n  Sun,\n  Sunrise,\n  Sunset,\n  SunTime,\n} from './day.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst Day = ({ day, index, selectedIndex, selectedDay, theme, unit }) => {\n  const { time, timezone } = day;\n  const date = formatTime(time, timezone, 'ddd');\n\n  const icon = weatherIcon(day);\n  /**\n   * Type can be 'High' or 'Low'\n   * @param {String} type\n   */\n  const computedTempValue = type => {\n    return unit === 'F' ? Math.round(day[`temperature${type}`]) : fToC(day[`temperature${type}`]);\n  };\n\n  return (\n    <DayContainer color={theme} index={index} selectedIndex={selectedIndex} onClick={() => selectedDay({ day })}>\n      <Time>{date}</Time>\n\n      <Icon>\n        {weatherIcon(day).startsWith('wi') ? (\n          <WeatherIconContainer>\n            <WeatherIcon type={icon} />\n          </WeatherIconContainer>\n        ) : (\n          <Image alt=\"icon\" src={`./weather/${icon}.svg`} />\n        )}\n      </Icon>\n\n      <Temperature>\n        <HighTemp>\n          {computedTempValue('High')}\n          <sup>o</sup>\n        </HighTemp>\n\n        <LowTemp>\n          {computedTempValue('Low')}\n          <sup>o</sup>\n        </LowTemp>\n      </Temperature>\n\n      <Suns>\n        <Sun>\n          <Sunrise>\n            <WeatherIcon type=\"sunrise\" />\n          </Sunrise>\n\n          <SunTime>{formatTime(day.sunriseTime, day.timezone, 'h:mm')}</SunTime>\n        </Sun>\n\n        <Sun>\n          <Sunset>\n            <WeatherIcon type=\"sunset\" />\n          </Sunset>\n          <SunTime>{formatTime(day.sunsetTime, day.timezone, 'HH:mm')}</SunTime>\n        </Sun>\n      </Suns>\n    </DayContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  theme: selectThemeColor,\n  unit: selectUnit,\n});\n\nDay.propTypes = {\n  theme: PropTypes.string,\n  unit: PropTypes.string,\n  day: PropTypes.object,\n  index: PropTypes.number,\n  selectedDay: PropTypes.func,\n  selectedIndex: PropTypes.number,\n};\n\nexport default connect(mapStateToProps)(Day);\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nexport const TimeFrames = styled.div`\n  ${tw`sm:flex sm:pb-3 sm:mb-4`}\n`;\n\nexport const Days = styled.div`\n  ${tw`flex flex-col mt-4 sm:mt-0 sm:flex-row w-full rounded`}\n`;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectDimensionsWidth } from 'redux/dimensions/dimensions.selectors';\nimport { selectWeatherFetchCurrent, selectWeatherFetchForecast } from 'redux/weather-fetch/weather-fetch.selectors';\n\nimport Carousel from 'nuka-carousel';\nimport { isEmpty, isUndefined } from 'lodash-es';\n\nimport { CarouselSettings } from 'config/carousel-settings';\n\nimport { formatTime } from 'utils/weather/format-time';\n\nimport TimeFrame from 'components/weather/time-frame/time-frame.component';\nimport Day from 'components/weather/day/day.component';\n\nimport { TimeFrames, Days } from './forecast.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst Forecast = ({ dimensionsWidth, weatherCurrent, weatherForecast }) => {\n  const [selectedDay, setSelectedDay] = useState('');\n  const [selectedDayIndex, setSelectedDayIndex] = useState(0);\n\n  const { time, timezone } = weatherCurrent;\n  const { days, timeFrames } = weatherForecast;\n  const today = formatTime(time, timezone, 'MM/DD/YYYY');\n\n  const selectedDayIndexHandler = useCallback(\n    selectedDay => {\n      const index = Object.keys(days).indexOf(selectedDay);\n      setSelectedDayIndex(index !== -1 ? index : 0);\n    },\n    [days],\n  );\n\n  /**\n   * day is a date '02/28/2020'\n   * @param {String} day\n   */\n  const daySelectHandler = day => {\n    setSelectedDay(day);\n    selectedDayIndexHandler(day);\n  };\n\n  useEffect(() => {\n    if (!isEmpty(weatherForecast) && !isUndefined(weatherForecast)) {\n      setSelectedDay(days[today] ? today : '');\n      selectedDayIndexHandler(days[today] ? today : '');\n    }\n  }, [weatherForecast, days, today, selectedDayIndexHandler]);\n\n  return (\n    <>\n      {dimensionsWidth >= 768 ? (\n        <TimeFrames>\n          {timeFrames[selectedDay] && (\n            <Carousel {...CarouselSettings('time', 'tablet')}>\n              {timeFrames[selectedDay].map((timeframe, index) => (\n                <TimeFrame timeframe={timeframe} key={index} />\n              ))}\n            </Carousel>\n          )}\n        </TimeFrames>\n      ) : (\n        <div className=\"pb-3\">\n          {timeFrames[selectedDay] && (\n            <Carousel {...CarouselSettings('time')}>\n              {timeFrames[selectedDay].map((timeframe, index) => (\n                <TimeFrame timeframe={timeframe} key={index} />\n              ))}\n            </Carousel>\n          )}\n        </div>\n      )}\n\n      <Days>\n        {Object.keys(weatherForecast.days).map((day, index) => {\n          return (\n            <Day\n              day={weatherForecast.days[day]}\n              key={index}\n              index={index}\n              selectedIndex={selectedDayIndex}\n              selectedDay={() => daySelectHandler(day)}\n            />\n          );\n        })}\n      </Days>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  dimensionsWidth: selectDimensionsWidth,\n  weatherCurrent: selectWeatherFetchCurrent,\n  weatherForecast: selectWeatherFetchForecast,\n});\n\nForecast.propTypes = {\n  dimensionsWidth: PropTypes.number,\n  weatherCurrent: PropTypes.object,\n  weatherForecast: PropTypes.object,\n};\n\nexport default connect(mapStateToProps)(Forecast);\n","import styled, { css } from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nconst color = ({ color }) => {\n  return color === 'light' ? tw`text-dark border-dark` : tw`text-light border-light`;\n};\n\nconst background = ({ color }) => {\n  return color === 'light' ? 'bg-light' : 'bg-dark';\n};\n\nconst weatherBackground = css`\n  border-top-left-radius: 1rem;\n  border-top-right-radius: 1rem;\n\n  @media (max-width: 767px) {\n    min-height: 24rem;\n  }\n\n  @media (min-width: 768px) {\n    height: 36rem;\n  }\n`;\n\nexport const WeatherContainer = styled.div`\n  ${tw`flex flex-col justify-center items-center lg:px-5 pt-10`}\n`;\n\nexport const WeatherDetail = styled.div`\n  ${tw`sm:w-full lg:w-5/6 xl:max-w-6xl border md:border-none rounded-t-2xl shadow-lg relative overflow-hidden`}\n  ${color} ${background}\n`;\n\nexport const Background = styled.img`\n  ${tw`w-full object-cover object-center`}\n  ${weatherBackground}\n`;\n\nexport const BackgroundSvg = styled.img`\n  ${tw`w-full object-cover object-center absolute top-0 right-0 bottom-0 left-0`}\n  ${weatherBackground}\n`;\n\nexport const Content = styled.div`\n  ${tw`absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light`}\n\n  background-color: rgba(0,0,0,0.2);\n  border-top-left-radius: 1rem;\n  border-top-right-radius: 1rem;\n`;\n\nexport const ForecastMobile = styled.div``;\n\nexport const Powered = styled.p`\n  ${tw`pt-4 text-xs font-light`}\n  ${color} ${background}\n`;\n\nexport const Reference = styled.a`\n  ${tw`z-0 font-medium`}\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectThemeColor } from 'redux/theme/theme.selectors';\nimport { selectDimensionsWidth } from 'redux/dimensions/dimensions.selectors';\nimport { selectWeatherFetchCurrent } from 'redux/weather-fetch/weather-fetch.selectors';\n\nimport { getWeatherBackground } from 'utils/weather/weather-background';\n\nimport Info from 'components/weather/info/info.component';\nimport InfoDetail from 'components/weather/info-detail/info-detail.component';\nimport Forecast from 'containers/forecast/forecast.container';\n\nimport {\n  WeatherContainer,\n  WeatherDetail,\n  Background,\n  BackgroundSvg,\n  Content,\n  ForecastMobile,\n  Powered,\n  Reference,\n} from './weather.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst Weather = ({ theme, dimensionsWidth, weatherCurrent }) => {\n  const { icon } = weatherCurrent;\n  const weatherBackground = getWeatherBackground(weatherCurrent);\n  const weatherSVG = icon === 'snow' ? 'snow' : 'rain';\n  const WET_TYPES = ['rain', 'snow', 'sleet', 'hail'];\n\n  return (\n    <WeatherContainer>\n      <WeatherDetail color={theme}>\n        <Background color={theme} alt=\"Weather Background\" src={`./weather-backgrounds/${weatherBackground}.jpg`} />\n        {/* Show rain or snow svg only when weather icon exist in WET_TYPES */}\n        {WET_TYPES.includes(icon) && (\n          <BackgroundSvg color={theme} alt=\"SVG\" src={`./weather-backgrounds/${weatherSVG}.svg`} />\n        )}\n\n        {dimensionsWidth >= 768 ? (\n          <Content>\n            <Info />\n            <InfoDetail />\n            <Forecast />\n          </Content>\n        ) : (\n          <>\n            <Content>\n              <Info />\n              <InfoDetail />\n            </Content>\n\n            <ForecastMobile>\n              <Forecast />\n            </ForecastMobile>\n          </>\n        )}\n      </WeatherDetail>\n\n      <Powered color={theme}>\n        Powered by&nbsp;\n        <Reference href=\"https://darksky.net\" target=\"_blank\">\n          Dark Sky\n        </Reference>\n      </Powered>\n    </WeatherContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  theme: selectThemeColor,\n  dimensionsWidth: selectDimensionsWidth,\n  weatherCurrent: selectWeatherFetchCurrent,\n});\n\nWeather.propTypes = {\n  theme: PropTypes.string,\n  dimensionsWidth: PropTypes.number,\n  weatherCurrent: PropTypes.object,\n};\n\nexport default connect(mapStateToProps)(Weather);\n"],"sourceRoot":""}
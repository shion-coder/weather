{"version":3,"sources":["redux/weather-fetch/weather-fetch.selectors.js","redux/favorites/favorites.selectors.js","redux/address-fetch/address-fetch.selectors.js","redux/search-fetch/search-fetch.selectors.js","redux/search-fetch/search-fetch.actions.js","components/error/error.styles.js","components/error/error.component.jsx","containers/error-boundary/error-boundary.styles.js","containers/error-boundary/error-boundary.containers.jsx","redux/search/search.selectors.js","redux/search/search.actions.js","components/icon/icon-searchbar/icon-searchbar.styles.js","components/icon/icon-searchbar/icon-searchbar.component.jsx","components/search/search.styles.js","components/search/search.component.jsx","components/search-result/search-result.styles.js","components/search-result/search-result.component.jsx","redux/address-fetch/address-fetch.actions.js","containers/auto-complete/auto-complete.styles.js","containers/auto-complete/auto-complete.container.jsx","components/favorite/favorite.styles.js","components/favorite/favorite.component.jsx","containers/favorites/favorites.styles.js","containers/favorites/favorites.container.jsx","containers/home/home.container.jsx"],"names":["selectWeatherFetch","state","weatherFetch","selectWeatherFetchData","createSelector","data","selectWeatherFetchLoading","loading","selectWeatherFetchCurrent","weatherCurrent","selectWeatherFetchForecast","weatherForecast","favoritesSelector","favorites","addressSelector","addressFetch","selectAddressFetchLoading","selectAddressFetchData","selectAddress","address","selectLatlong","latlong","selectSearchFetch","searchFetch","selectSearchFetchLoading","selectSearchFetchShowCaret","showCaret","selectSearchFetchShowData","showData","selectSearchFetchData","selectSearchFetchIsError","isError","selectSearchFetchError","error","toggleData","type","TOGGLE_DATA","ErrorContainer","styled","div","background","Message","span","ButtonContainer","CloseButton","svg","mapStateToProps","createStructuredSelector","theme","selectThemeColor","connect","clearErrorMessage","CLEAR_ERROR_MESSAGE","message","onClick","role","xmlns","viewBox","d","ErrorBoundaryContainer","ErrorBoundary","hasErrored","this","children","props","Component","selectSearchInput","search","input","onSearchChange","ON_SEARCH_CHANGE","payload","IconSearchbarContainer","color","icon","up","down","SearchContainer","IconContainer","Input","CaretContainer","searchFetchTrigger","SEARCH_FETCH_TRIGGER","debounceFetch","useCallback","debounce","value","placeholder","onChange","target","SearchResultContainer","p","addressFetchTriger","ADDRESS_FETCH_TRIGGER","name","id","split","AutoCompleteContainer","SearchResults","text","map","result","index","key","Wrapper","FavoriteContainer","favorite","fullName","dispatch","Container","Weather","lazy","addressLoading","weatherLoading","fallback"],"mappings":"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","file":"static/js/5.e78817eb.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\n\n/* -------------------------------------------------------------------------- */\n\nconst selectWeatherFetch = state => state.weatherFetch;\n\nconst selectWeatherFetchData = createSelector([selectWeatherFetch], weatherFetch => weatherFetch.data);\n\nexport const selectWeatherFetchLoading = createSelector([selectWeatherFetch], weatherFetch => weatherFetch.loading);\n\nexport const selectWeatherFetchCurrent = createSelector([selectWeatherFetchData], data => data.weatherCurrent);\n\nexport const selectWeatherFetchForecast = createSelector([selectWeatherFetchData], data => data.weatherForecast);\n","export const favoritesSelector = state => state.favorites;\n","import { createSelector } from 'reselect';\n\n/* -------------------------------------------------------------------------- */\n\nconst addressSelector = state => state.addressFetch;\n\nexport const selectAddressFetchLoading = createSelector([addressSelector], addressFetch => addressFetch.loading);\n\nexport const selectAddressFetchData = createSelector([addressSelector], addressFetch => addressFetch.data);\n\nexport const selectAddress = createSelector([selectAddressFetchData], data => data.address);\n\nexport const selectLatlong = createSelector([selectAddressFetchData], data => data.latlong);\n","import { createSelector } from 'reselect';\n\n/* -------------------------------------------------------------------------- */\n\nconst selectSearchFetch = state => state.searchFetch;\n\nexport const selectSearchFetchLoading = createSelector([selectSearchFetch], searchFetch => searchFetch.loading);\n\nexport const selectSearchFetchShowCaret = createSelector([selectSearchFetch], searchFetch => searchFetch.showCaret);\n\nexport const selectSearchFetchShowData = createSelector([selectSearchFetch], searchFetch => searchFetch.showData);\n\nexport const selectSearchFetchData = createSelector([selectSearchFetch], searchFetch => searchFetch.data);\n\nexport const selectSearchFetchIsError = createSelector([selectSearchFetch], searchFetch => searchFetch.isError);\n\nexport const selectSearchFetchError = createSelector([selectSearchFetch], searchFetch => searchFetch.error);\n","import { SEARCH_FETCH_TRIGGER, TOGGLE_DATA, CLEAR_SHOW, CLEAR_ERROR_MESSAGE } from './search-fetch.types';\n\n/* -------------------------------------------------------------------------- */\n\n/**\n * Trigger fetch\n * @param {String} input\n */\nexport const searchFetchTrigger = input => ({\n  type: SEARCH_FETCH_TRIGGER,\n  payload: input,\n});\n\nexport const toggleData = () => ({\n  type: TOGGLE_DATA,\n});\n\nexport const clearShow = () => ({\n  type: CLEAR_SHOW,\n});\n\nexport const clearErrorMessage = () => ({\n  type: CLEAR_ERROR_MESSAGE,\n});\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nconst background = ({ background }) => {\n  return background === 'light' ? tw`bg-light` : tw`bg-dark`;\n};\n\nexport const ErrorContainer = styled.div`\n  ${tw`relative w-5/6 md:w-1/2 xl:max-w-5xl border border-red-500 text-red-500 mt-5 px-4 py-2 rounded`}\n  ${background}\n`;\n\nexport const Message = styled.span`\n  ${tw`text-sm break-words`}\n`;\n\nexport const ButtonContainer = styled.span`\n  ${tw`absolute ml-3 mr-1 py-3`}\n\n  top: -3px;\n  right: 5px;\n`;\n\nexport const CloseButton = styled.svg`\n  ${tw`fill-current h-5 w-5`}\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectThemeColor } from 'redux/theme/theme.selectors';\nimport { selectSearchFetchError } from 'redux/search-fetch/search-fetch.selectors';\nimport { clearErrorMessage } from 'redux/search-fetch/search-fetch.actions';\n\nimport { ErrorContainer, Message, ButtonContainer, CloseButton } from './error.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst Error = ({ theme, error, clearErrorMessage }) => {\n  const message = error.message || 'Something went wrong !';\n\n  return (\n    <ErrorContainer background={theme}>\n      <Message>{message}</Message>\n\n      <ButtonContainer onClick={clearErrorMessage}>\n        <CloseButton role=\"button\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n          <path d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\" />\n        </CloseButton>\n      </ButtonContainer>\n    </ErrorContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  theme: selectThemeColor,\n  error: selectSearchFetchError,\n});\n\nError.propTypes = {\n  theme: PropTypes.string,\n  error: PropTypes.object,\n  clearErrorMessage: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, { clearErrorMessage })(Error);\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nexport const ErrorBoundaryContainer = styled.div`\n  ${tw`flex justify-center`}\n`;\n","import React, { Component } from 'react';\n\nimport Error from 'components/error/error.component';\n\nimport { ErrorBoundaryContainer } from './error-boundary.styles';\n\n/* -------------------------------------------------------------------------- */\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasErrored: false,\n  };\n\n  // Catch error in any of the children\n  static getDerivedStateFromError() {\n    return { hasErrored: true };\n  }\n\n  render() {\n    const { hasErrored } = this.state;\n    const { children } = this.props;\n\n    return hasErrored ? (\n      <ErrorBoundaryContainer>\n        <Error />\n      </ErrorBoundaryContainer>\n    ) : (\n      children\n    );\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n\nexport default ErrorBoundary;\n","import { createSelector } from 'reselect';\n\n/* -------------------------------------------------------------------------- */\n\nconst searchSelector = state => state.search;\n\nexport const selectSearchInput = createSelector([searchSelector], search => search.input);\n","import { ON_SEARCH_CHANGE } from './search.types';\n\n/* -------------------------------------------------------------------------- */\n\n/**\n * Control the value of input\n * @param {String} input\n */\nexport const onSearchChange = input => ({\n  type: ON_SEARCH_CHANGE,\n  payload: input,\n});\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nconst color = ({ color }) => {\n  return color === 'light' ? tw`text-dark` : tw`text-light`;\n};\n\nexport const IconSearchbarContainer = styled.span`\n  ${tw`opacity-75 text-xl`}\n  ${color}\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectThemeColor } from 'redux/theme/theme.selectors';\n\nimport { FiSearch } from 'react-icons/fi';\nimport { IoIosArrowUp, IoIosArrowDown } from 'react-icons/io';\n\nimport { IconSearchbarContainer } from './icon-searchbar.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst IconSearchbar = ({ type, theme }) => {\n  const icon = {\n    search: <FiSearch />,\n    up: <IoIosArrowUp />,\n    down: <IoIosArrowDown />,\n  };\n\n  return <IconSearchbarContainer color={theme}>{type && icon[type]}</IconSearchbarContainer>;\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  theme: selectThemeColor,\n});\n\nIconSearchbar.propTypes = {\n  type: PropTypes.string,\n  theme: PropTypes.string,\n};\n\nexport default connect(mapStateToProps)(IconSearchbar);\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nconst color = ({ color }) => {\n  return color === 'light' ? tw`text-dark` : tw`text-light`;\n};\n\nconst border = ({ showData }) => {\n  return showData ? tw`rounded-t-2xl` : tw`rounded-2xl`;\n};\n\nconst background = ({ color }) => {\n  return color === 'light' ? '#e2e8f0' : '#3a3a3a';\n};\n\nexport const SearchContainer = styled.div`\n  ${tw`relative h-12 w-5/6 md:w-1/2 xl:max-w-5xl`}\n`;\n\nexport const IconContainer = styled.div`\n  ${tw`absolute top-0 left-0 ml-5`}\n\n  margin-top: 0.9rem;\n`;\n\nexport const Input = styled.input`\n  ${tw`text-sm h-12 appearance-none w-full py-3 pl-16 pr-6 mb-5 focus:outline-none truncate`}\n  ${color} ${border}\n  \n  background-color: ${background};\n  letter-spacing: 0.05em;\n  box-shadow: 0 0 3px 0 rgba(0,0,0,0.1), 0 0 2px 0 rgba(0,0,0,0.06);\n\n  ::placeholder {\n    ${color}\n    opacity: 0.5;\n  }\n`;\n\nexport const CaretContainer = styled.div`\n  ${tw`flex absolute right-0 top-0 mr-4 cursor-pointer`}\n\n  margin-top: 0.9rem;\n`;\n","import React, { useCallback } from 'react';\nimport { PropTypes } from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectThemeColor } from 'redux/theme/theme.selectors';\nimport { selectSearchInput } from 'redux/search/search.selectors';\nimport { selectSearchFetchShowCaret, selectSearchFetchShowData } from 'redux/search-fetch/search-fetch.selectors';\nimport { onSearchChange } from 'redux/search/search.actions';\nimport { searchFetchTrigger, toggleData } from 'redux/search-fetch/search-fetch.actions';\n\nimport { debounce } from 'lodash-es';\n\nimport IconSearchbar from 'components/icon/icon-searchbar/icon-searchbar.component';\n\nimport { SearchContainer, IconContainer, Input, CaretContainer } from './search.styles.js';\n\n/* -------------------------------------------------------------------------- */\n\nconst Search = ({ theme, input, showCaret, showData, onSearchChange, searchFetchTrigger, toggleData }) => {\n  const debounceFetch = useCallback(\n    debounce(value => searchFetchTrigger(value), 1000),\n    [],\n  );\n\n  const onChange = ({ target: { value } }) => {\n    onSearchChange(value);\n    debounceFetch(value);\n  };\n\n  return (\n    <SearchContainer>\n      <IconContainer>\n        <IconSearchbar type=\"search\" color={theme} />\n      </IconContainer>\n\n      <Input\n        type=\"text\"\n        placeholder=\"Type city name to find weather forecast ...\"\n        value={input}\n        onChange={onChange}\n        color={theme}\n        showData={showData}\n      />\n\n      {showCaret && (\n        <CaretContainer onClick={toggleData}>\n          {showData ? <IconSearchbar type=\"up\" color={theme} /> : <IconSearchbar type=\"down\" color={theme} />}\n        </CaretContainer>\n      )}\n    </SearchContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  theme: selectThemeColor,\n  input: selectSearchInput,\n  showCaret: selectSearchFetchShowCaret,\n  showData: selectSearchFetchShowData,\n});\n\nSearch.propTypes = {\n  theme: PropTypes.string,\n  input: PropTypes.string,\n  showCaret: PropTypes.bool,\n  showData: PropTypes.bool,\n  onSearchChange: PropTypes.func,\n  searchFetchTrigger: PropTypes.func,\n  toggleData: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, { onSearchChange, searchFetchTrigger, toggleData })(Search);\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nconst color = ({ color }) => {\n  return color === 'light'\n    ? tw`text-dark hover:text-light hover:bg-dark`\n    : tw`text-light hover:text-dark hover:bg-light`;\n};\n\nexport const SearchResultContainer = styled.p`\n  ${tw`px-5 py-1 cursor-pointer`}\n  ${color}\n\n  :hover {\n    opacity: 0.6;\n  }\n`;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectThemeColor } from 'redux/theme/theme.selectors';\nimport { onSearchChange } from 'redux/search/search.actions';\nimport { toggleData } from 'redux/search-fetch/search-fetch.actions';\nimport { addressFetchTriger } from 'redux/address-fetch/address-fetch.actions';\n\nimport { SearchResultContainer } from './search-result.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst SearchResult = ({ theme, name, id, onSearchChange, toggleData, addressFetchTriger }) => {\n  const handleClick = () => {\n    const input = name.split(',')[0];\n\n    onSearchChange(input);\n    toggleData();\n    addressFetchTriger(id);\n  };\n\n  return (\n    <SearchResultContainer color={theme} onClick={handleClick}>\n      {name}\n    </SearchResultContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  theme: selectThemeColor,\n});\n\nSearchResult.propTypes = {\n  theme: PropTypes.string,\n  name: PropTypes.string,\n  id: PropTypes.string,\n  onSearchChange: PropTypes.func,\n  toggleData: PropTypes.func,\n  addressFetchTriger: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, { onSearchChange, toggleData, addressFetchTriger })(SearchResult);\n","import { ADDRESS_FETCH_TRIGGER } from './address-fetch.types';\n\n/* -------------------------------------------------------------------------- */\n\n/**\n * Trigger fetch\n * @param {String} input\n */\nexport const addressFetchTriger = input => ({\n  type: ADDRESS_FETCH_TRIGGER,\n  payload: input,\n});\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nconst color = ({ color }) => {\n  return color === 'light' ? tw`text-dark` : tw`text-light`;\n};\n\nconst background = ({ color }) => {\n  return color === 'light' ? '#e2e8f0' : '#3a3a3a';\n};\n\nexport const AutoCompleteContainer = styled.div`\n  ${tw`flex flex-col items-center`}\n`;\n\nexport const SearchResults = styled.div`\n  ${tw`w-5/6 md:w-1/2 xl:max-w-5xl border-transparent rounded-b-2xl`}\n  ${color}\n\n  background-color: ${background};\n  max-height: 290px;\n  overflow-y: auto;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectThemeColor } from 'redux/theme/theme.selectors';\nimport {\n  selectSearchFetchLoading,\n  selectSearchFetchShowData,\n  selectSearchFetchData,\n  selectSearchFetchIsError,\n} from 'redux/search-fetch/search-fetch.selectors';\n\nimport Loader from 'components/loader/loader.component';\nimport Search from 'components/search/search.component';\nimport SearchResult from 'components/search-result/search-result.component';\nimport Error from 'components/error/error.component';\n\nimport { AutoCompleteContainer, SearchResults } from './auto-complete.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst AutoComplete = ({ theme, loading, showData, data, isError }) => (\n  <AutoCompleteContainer>\n    <Search />\n\n    {loading ? (\n      <Loader text=\"Searching City ...\" />\n    ) : isError ? (\n      <Error />\n    ) : (\n      showData && (\n        <SearchResults color={theme}>\n          {data.map((result, index) => (\n            <SearchResult key={index} {...result} />\n          ))}\n        </SearchResults>\n      )\n    )}\n  </AutoCompleteContainer>\n);\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  theme: selectThemeColor,\n  loading: selectSearchFetchLoading,\n  showData: selectSearchFetchShowData,\n  data: selectSearchFetchData,\n  isError: selectSearchFetchIsError,\n});\n\nAutoComplete.propTypes = {\n  theme: PropTypes.string,\n  loading: PropTypes.bool,\n  showData: PropTypes.bool,\n  data: PropTypes.array,\n  isError: PropTypes.bool,\n};\n\nexport default connect(mapStateToProps)(AutoComplete);\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nconst color = ({ color }) => {\n  return color === 'light'\n    ? tw`text-light hover:text-light bg-light hover:bg-dark`\n    : tw`text-light hover:text-dark bg-dark hover:bg-light`;\n};\n\nexport const Wrapper = styled.div`\n  ${tw`relative w-full h-16`}\n`;\n\nexport const FavoriteContainer = styled.div`\n  ${tw`py-3 lg:pt-1/2 font-semibold rounded-2xl cursor-pointer text-center justify-center`}\n  ${color}\n\n  background-color: rgba(0,0,0,0.7);\n  border-top-left-radius: 1rem;\n  border-top-right-radius: 1rem;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectThemeColor } from 'redux/theme/theme.selectors';\n\nimport { Wrapper, FavoriteContainer } from './favorite.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst Favorite = ({ favorite: { name, fullName, latlong }, theme, dispatch }) => {\n  const handleClick = () =>\n    dispatch({ type: 'ADDRESS_FETCH_SUCCESS', payload: { data: { address: { name, fullName }, latlong } } });\n\n  return (\n    <Wrapper>\n      <FavoriteContainer color={theme} onClick={handleClick}>\n        {name}\n      </FavoriteContainer>\n    </Wrapper>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  theme: selectThemeColor,\n});\n\nFavorite.propTypes = {\n  favorite: PropTypes.object,\n  theme: PropTypes.string,\n};\n\nexport default connect(mapStateToProps)(Favorite);\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\n/* -------------------------------------------------------------------------- */\n\nexport const Wrapper = styled.div`\n  ${tw`hidden sm:flex justify-center items-center`}\n`;\n\nexport const Container = styled.div`\n  ${tw`sm:w-5/6 xl:max-w-6xl px-5 py-5 flex sm:flex-row flex-wrap justify-center`}\n`;\n\nexport const FavoriteContainer = styled.div`\n  ${tw`m-2 sm:w-1/2 md:w-1/4`}\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { favoritesSelector } from 'redux/favorites/favorites.selectors';\n\nimport Favorite from 'components/favorite/favorite.component';\n\nimport { Wrapper, Container, FavoriteContainer } from './favorites.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst Favorites = ({ favorites }) => {\n  return (\n    favorites && (\n      <Wrapper>\n        <Container>\n          {favorites.map(favorite => (\n            <FavoriteContainer key={favorite.latlong}>\n              <Favorite favorite={favorite} />\n            </FavoriteContainer>\n          ))}\n        </Container>\n      </Wrapper>\n    )\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  favorites: favoritesSelector,\n});\n\nFavorites.propTypes = {\n  favorites: PropTypes.array,\n};\n\nexport default connect(mapStateToProps)(Favorites);\n","import React, { Suspense, lazy } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectAddressFetchLoading } from 'redux/address-fetch/address-fetch.selectors';\nimport { selectWeatherFetchLoading, selectWeatherFetchCurrent } from 'redux/weather-fetch/weather-fetch.selectors';\nimport { favoritesSelector } from 'redux/favorites/favorites.selectors';\n\nimport Loader from 'components/loader/loader.component';\nimport ErrorBoundary from 'containers/error-boundary/error-boundary.containers';\nimport AutoComplete from 'containers/auto-complete/auto-complete.container';\nimport Favorites from 'containers/favorites/favorites.container';\n\n/* -------------------------------------------------------------------------- */\n\n// Lazy\nconst Weather = lazy(() => import(/* webpackPrefetch: true */ 'containers/weather/weather.container'));\n\nconst Home = ({ addressLoading, weatherLoading, weatherCurrent, favorites }) => (\n  <>\n    <AutoComplete />\n\n    {addressLoading || weatherLoading ? (\n      <Loader text=\"Loading Data ...\" />\n    ) : (\n      weatherCurrent && (\n        <ErrorBoundary>\n          <Suspense fallback={<Loader text=\"Loading Components ...\" />}>\n            <Weather />\n          </Suspense>\n        </ErrorBoundary>\n      )\n    )}\n\n    {favorites && <Favorites />}\n  </>\n);\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  addressLoading: selectAddressFetchLoading,\n  weatherLoading: selectWeatherFetchLoading,\n  weatherCurrent: selectWeatherFetchCurrent,\n  favorites: favoritesSelector,\n});\n\nHome.propTypes = {\n  addressLoading: PropTypes.bool,\n  weatherLoading: PropTypes.bool,\n  weatherCurrent: PropTypes.object,\n  favorites: PropTypes.array,\n};\n\nexport default connect(mapStateToProps)(Home);\n"],"sourceRoot":""}